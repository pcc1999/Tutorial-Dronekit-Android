apply plugin: 'com.android.library'
//apply plugin: 'com.getkeepsafe.dexcount'

android{
    namespace "com.o3dr.android.client"
}

ext {
    VERSION_MAJOR = 3
    VERSION_MINOR = 0
    VERSION_PATCH = 2
    VERSION_SUFFIX = "release"

    PUBLISH_ARTIFACT_ID = 'dronekit-android'
    PUBLISH_VERSION = generateVersionName("", VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH, VERSION_SUFFIX)
    PUBLISH_VERSION_CODE = computeVersionCode(VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH)
    PROJECT_DESCRIPTION = "Android DroneKit client library."
    PROJECT_LABELS = ['DroneCode', '3DR', 'Tower', 'DroneAPI', 'Android', 'DroneKit', '3DR Services']
    PROJECT_LICENSE = 'The Apache Software License, Version 2.0'
    PROJECT_LICENSE_URL = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    PROJECT_LICENSE_DISTRIBUTION = 'repo'

    play_services_version = '8.4.0'

    android_build_sdk_version = 33
    android_build_tools_version = '30'
    android_build_target_sdk_version = 28
    android_build_min_sdk_version = 19
}

def computeVersionCode(int versionMajor, int versionMinor, int versionPatch, int versionBuild = 0){
    return versionMajor * 100000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
}

def generateVersionName(String versionPrefix, int versionMajor, int versionMinor, int versionPatch, String versionSuffix = ""){
    def versionName = "${versionPrefix}${versionMajor}.${versionMinor}.${versionPatch}"

    if(versionSuffix != null && !versionSuffix.isEmpty() && versionSuffix != "release"){
        versionName += "-${versionSuffix}"
    }

    return versionName
}

def generateVersionNameSuffix(int versionBuild, String releaseType, boolean includeHash = false){
    def versionNameSuffix = "${releaseType}.${versionBuild}"
    if(includeHash){
        versionNameSuffix += " (${getGitShortHash()})"
    }
    return versionNameSuffix
}

//Log levels values
def logLevelVerbose = 2;
def logLevelDebug = 3;
def logLevelInfo = 4;
def logLevelWarn = 5;
def logLevelError = 6;
def logLevelAssert = 7;

android {
    compileSdkVersion android_build_sdk_version

    defaultConfig {
        minSdkVersion android_build_min_sdk_version
        targetSdkVersion android_build_target_sdk_version

        versionCode PUBLISH_VERSION_CODE
        versionName PUBLISH_VERSION
        //Build config fields
        buildConfigField "boolean", "SITL_DEBUG", "false"
        buildConfigField "String", "SOLO_LINK_IP", getSoloLinkIp()
        buildConfigField "boolean", "WRITE_LOG_FILE", "false"
        buildConfigField "int", "LOG_FILE_LEVEL", "$logLevelDebug"
        buildConfigField "int", "VERSION_CODE", "$PUBLISH_VERSION_CODE"
    }

    sourceSets {
        main {
            aidl.srcDirs = ['src/main/java']
        }
    }

    /*compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }*/

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

/*    android.libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            if (file != null && file.name.endsWith('.aar')) {
                def apkFileName = "${PUBLISH_ARTIFACT_ID}.${PUBLISH_VERSION}.aar"
                output.outputFileName = new File("./../", apkFileName)
            }
        }
    }*/

    buildTypes {
        debug {
            debuggable true
            buildConfigField "boolean", "WRITE_LOG_FILE", "true"
        }

        sitl {
            debuggable true
            buildConfigField "String", "SOLO_LINK_IP", getLocalIp()
            buildConfigField "boolean", "SITL_DEBUG", "true"
        }

        release {
        }
    }

    buildFeatures {
        aidl true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation 'com.jakewharton.timber:timber:3.1.0'

    implementation "com.google.android.gms:play-services-base:${play_services_version}"
    implementation "com.google.android.gms:play-services-location:${play_services_version}"

    //Java semver library
    implementation 'com.github.zafarkhaja:java-semver:0.9.0'

    implementation 'com.jcraft:jsch:0.1.51'

    //MP4 generation library
    implementation 'com.googlecode.mp4parser:isoparser:1.1.7'

    implementation project(path: ':UsbSerialLibrary')
    implementation project(path: ':Mavlink')

    implementation files("./libs/d2xx.jar")

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation "org.robolectric:robolectric:3.0"

    implementation 'com.google.android.gms:play-services-gcm:15.0.1'
    implementation 'com.google.android.gms:play-services-location:15.0.1'
}

def getSoloLinkIp() {
    return '\"10.1.1.10\"'
}

def getLocalIp() {
    try {
        return '\"' + InetAddress.getLocalHost().getCanonicalHostName() + '\"'
    }catch(Exception e){
        return '\"\"'
    }
}

evaluationDependsOn ':Mavlink'
assemble.dependsOn "${rootDir}/ClientLib/libs/Mavlink.jar"

//apply from: "$projectDir/maven-push.gradle"